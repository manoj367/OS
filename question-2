#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
volatile int running_threads = 0;
pthread_t thread[3]; 
int nOfElem;
struct Result{ 
int min;
int max;
int avg;
}Result;
void *findMin(void *array_ptr){
int i; 
int *elements = (int*)array_ptr; 
Result.min = elements[0]; 
for(i = 0; i < nOfElem; i++){
if(elements[i] < Result.min){	
Result.min = elements[i];	
}
}
running_threads -= 1;	
return NULL;
}
void *findMax(void *array_ptr){
int i;	
int *elements = (int*)array_ptr;  
for(i = 0; i < nOfElem; i++){	
if(elements[i] > Result.max){	
Result.max = elements[i];
}
}
running_threads -= 1;	
return NULL;
}
void *findavg(void *array_ptr){
int i;	
int *elements = (int*)array_ptr; 	
for(i = 0; i < nOfElem; i++){		
Result.avg += elements[i];	
}
Result.avg = Result.avg/nOfElem;	
running_threads -= 1;	
return NULL;
}
int getArrayInput(int n, int *array_ptr){
int input;
int noOfElem = 0;
printf("Create Dynamic Array...\n-\n");
for(;;){  
printf("Enter a positive number:\nNegative number to Stop\n-\n");
if (scanf("%d",&input) != 1){
printf("\nThis is not an Integer\nfill the array again\nINTEGERS only!\n");
exit(Exit_failure);
}
if (input >= 0){ 
if (noOfElem == n){
n += 1; 
array_ptr = realloc(array_ptr, n * sizeof(void));
}
array_ptr[noOfElem++] = input;
} else {
printf("\nNumber of Integers: %d\n", noOfElem);
break;
}
}
return noOfElem;
}
void joinThreads(int numberOfThreads){
int i; 
int s; 
while(numberOfThreads >= 0){	
s = pthread_join(thread[numberOfThreads], NULL);
if (s != 0){
handle_error_en(s, "create_pthread");
}
numberOfThreads--;
}
}
void createThreads(int *array_ptr){
int s;  
s = pthread_create(&thread[0], NULL, findMin, (void *)array_ptr);
if (s != 0){
handle_error_en(s, "create_pthread");
}
running_threads += 1;
s = pthread_create(&thread[1], NULL, findMax, (void *)array_ptr);
if (s != 0){
handle_error_en(s, "create_pthread");
}
running_threads += 1;
s = pthread_create(&thread[2], NULL, findavg, (void *)array_ptr);
if (s != 0){
handle_error_en(s, "create_pthread");
}
running_threads += 1;
}
int main(){
int n = 1; 
int *array_ptr = malloc(n * sizeof(int));
nOfElem = getArrayInput(n, array_ptr);
createThreads(array_ptr);
while(running_threads>0){	
sleep(1);
}
joinThreads(2);	
printf("\nThe avg is %d\nThe max is %d\nThe min is %d\n",Result.avg, Result.max,
Result.min);
return(0);    }
